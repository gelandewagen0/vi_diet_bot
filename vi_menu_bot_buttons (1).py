
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# –¢–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "7777551240:AAEQ3ziVflWlpiDONWy-Nzck5MNksbPF0GQ"

# –õ–æ–≥–∏–∫–∞ –ø–æ–¥–±–æ—Ä–∞ –º–µ–Ω—é (–∑–∞–≥–ª—É—à–∫–∞)
def get_menu():
    return {
        "—É—Ç—Ä–æ": "–∫–∞–∫–∞–æ + —Ç–æ—Å—Ç —Å –¥–∂–µ–º–æ–º",
        "–æ–±–µ–¥": "—Å—ã—Ä–Ω–∏–∫–∏ (–º–∞–≥–∞–∑–∏–Ω–Ω—ã–µ) + —á–∞–π",
        "–≤–µ—á–µ—Ä": "—Ç–≤–æ—Ä–æ–∂–æ–∫ —Å –±–∞–Ω–∞–Ω–æ–º"
    }

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
reply_keyboard = [
    ["üçΩ –ú–µ–Ω—é", "üßÉ –î–∞–π –∂—Ä–∞—Ç—å"],
    ["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
]
markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ô–æ, —ç—Ç–æ –í–∏. –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É üëá",
        reply_markup=markup
    )

# –û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–µ–Ω—é"
async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    menu = get_menu()
    text = "üìí –ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
    for k, v in menu.items():
        text += f"üçΩ {k.capitalize()}: {v}\n"
    await update.message.reply_text(text)

# –û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–∞–π –∂—Ä–∞—Ç—å"
async def handle_alt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    menu = get_menu()
    text = "üßÉ –î–µ—Ä–∂–∏ –º–µ–Ω—é, –ø–æ–∫–∞ —Ç—ã –Ω–µ —Å–≥—Ä—ã–∑–ª–∞ –º—ã—à–∫—É:\n"
    for k, v in menu.items():
        text += f"{k.capitalize()}: {v}\n"
    await update.message.reply_text(text)

# –û—Ç–≤–µ—Ç –Ω–∞ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
async def handle_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ù–æ —Å–∫–æ—Ä–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–∫–∞–∑–∞—Ç—å –±–æ—Ç—É: —è –¥–æ–º–∞, —è –Ω–µ –≥–æ—Ç–æ–≤–ª—é, —è –≥–æ–ª–æ–¥–Ω—ã–π –∑–≤–µ—Ä—å.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üçΩ –ú–µ–Ω—é":
        await handle_menu(update, context)
    elif text == "üßÉ –î–∞–π –∂—Ä–∞—Ç—å":
        await handle_alt(update, context)
    elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await handle_settings(update, context)
    else:
        await update.message.reply_text("–Ø —Ç–µ–±—è –ø–æ–Ω—è–ª, –Ω–æ –ø–æ–∫–∞ –∑–Ω–∞—é —Ç–æ–ª—å–∫–æ –º–µ–Ω—é –∏ –ø–æ–∂—Ä–∞—Ç—å üòé")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ñ–¥—ë—Ç –∫–æ–º–∞–Ω–¥...")
    app.run_polling()

if __name__ == "__main__":
    main()
